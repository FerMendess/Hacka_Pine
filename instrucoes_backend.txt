Atendimento:
● RF04: O chatbot deve ser capaz de identicar quando uma
solicitação exige atenção humana e direcionar o cliente para o
canal/pessoa adequada (ex: atendente humano, FAQ,
formulário online).

Cotação de Moeda:
● RF05: O chatbot deve fornecer cotações em tempo real de
diferentes moedas.
● RF06: O chatbot deve permitir que o cliente escolha a moeda
de origem e destino.
● RF07: O chatbot deve apresentar as cotações de forma clara e
concisa, incluindo a data e hora da atualização.

Contratação da Moeda:
● RF08: O chatbot deve permitir a contratação da moeda cotada,
solicitando ao usuário o valor que ele deseja contratar na
moeda destino


Back-end
● O back-end deve ser desenvolvido em .NET C# 8.0.
● A arquitetura utilizada deve seguir o modelo DDD
(Domain-Driven Design).
● Utilize o Dapper para acesso ao banco de dados (caso utilize
SQL Server).
● A API criada deve implementar autenticação via Bearer JWT.
● Arquitetura hexagonal
● Clean code

Banco de dados
● O banco de dados utilizado será o SQL Server ou MongoDB


PRINCIPAIS
FUNCIONALIDADES
• Consultas de Contas: Saldo, extratos, limites e tarifas.
• Produtos Bancários: Informações sobre empréstimos,
financiamentos e cartões.
• Cotações de Moedas e Commodities: Valores atualizados em
tempo real.

Facilitar o acesso a informações bancárias e cotações de moedas: O chatbot deve fornecer informações relevantes sobre contas, produtos bancários, investimentos e cotações de moedas de forma clara, concisa e fácil de entender. A interface do chatbot deve ser intuitiva e permitir que os usuários naveguem facilmente pelas informações que precisam.

Melhorar a experiência do cliente com um serviço disponível 24/7: O chatbot deve estar disponível a qualquer hora do dia ou da noite, oferecendo suporte e informações aos clientes quando precisarem. Isso significa que o chatbot precisa ser capaz de funcionar de forma autônoma e sem a necessidade de intervenção humana.
Pix pelo Mecanismo Especial de Devolução (MED) 10 min

Consultas de Contas: Saldo, extratos, limites, tarifas e histórico de transações. O chatbot deve ser capaz de fornecer informações detalhadas sobre as contas dos clientes, incluindo saldos, extratos, limites de crédito e tarifas.

Detalhes de Investimentos: Aplicações, simulações de investimentos, taxas e rendimentos. O chatbot deve permitir que os clientes acessem informações sobre seus investimentos, como saldo, performance e histórico de transações.

Cotações de Moedas e commodities: Valores atualizados em tempo real de diversas moedas. O chatbot deve fornecer cotações de moedas atualizadas em tempo real, permitindo que os clientes acompanhem as flutuações do mercado.

using ChatbotBackend.Application.Interfaces;
using ChatbotBackend.Domain.Entities;

namespace ChatbotBackend.Infrastructure.Services
{
    public class MockQuotationService : IQuotationService
    {
        public Task<Quotation> GetQuotationAsync(string currencyFrom, string currencyTo)
        {
            // Return mock data
            var quotation = new Quotation
            {
                CurrencyFrom = currencyFrom,
                CurrencyTo = currencyTo,
                Rate = 5.50M,
                Date = DateTime.Now
            };
            return Task.FromResult(quotation);
        }
    }
}

using backend.Application.Interfaces;
using backend.Domain.Entities;

namespace backend.Infrastructure.Services
{
    public class MockQuotationService : IQuotationService
    {
        public Task<Quotation> GetQuotationAsync(string currencyFrom, string currencyTo)
        {
            // Return mock data
            var quotation = new Quotation
            {
                CurrencyFrom = currencyFrom,
                CurrencyTo = currencyTo,
                Rate = 5.50M,
                Date = DateTime.Now
            };
            return Task.FromResult(quotation);
        }
    }
}

CREATE TABLE Quotations (
    Id INT PRIMARY KEY IDENTITY(1,1),
    CurrencyFrom VARCHAR(10),
    CurrencyTo VARCHAR(10),
    Rate DECIMAL(18,6),
    Date DATETIME
);

// In Startup.cs, within ConfigureServices method
if (Environment.IsDevelopment())
{
    services.AddScoped<IQuotationService, MockQuotationService>();
}
else
{
    services.AddScoped<IQuotationService, QuotationService>();
}

{
  "Jwt": {
    "Key": "YOUR_SECRET_KEY",
    "Issuer": "YourIssuer",
    "Audience": "YourAudience"
  },
  "ConnectionStrings": {
    "DefaultConnection": "Your SQL Server Connection String"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}